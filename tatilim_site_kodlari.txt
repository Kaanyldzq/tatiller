======================= TATILIM SITE KODLARI =======================

------------ 1. FRONTEND KODLARI ------------

-- Config.js --
// API endpoint yapılandırması
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002/api';

export { API_BASE_URL };

-- AdminPanel.js --
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../styles/AdminPanel.css';
import { API_BASE_URL } from '../config';

const AdminPanel = () => {
  const navigate = useNavigate();
  const [hotels, setHotels] = useState([]);
  const [complaints, setComplaints] = useState([]);
  const [openDialog, setOpenDialog] = useState(false);
  const [editingHotel, setEditingHotel] = useState(null);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
  const [formData, setFormData] = useState({
    name: '',
    location: '',
    price: '',
    rating: '',
    image: '',
    photos: [],
  });
  const [campaigns, setCampaigns] = useState([]);
  const [openCampaignDialog, setOpenCampaignDialog] = useState(false);
  const [editingCampaign, setEditingCampaign] = useState(null);
  const [campaignFormData, setCampaignFormData] = useState({
    title: '',
    description: '',
    discount: '',
    startDate: '',
    endDate: '',
    image: ''
  });
  const [activeTab, setActiveTab] = useState(0);
  const [selectedHotel, setSelectedHotel] = useState(null);
  const [photoDialogOpen, setPhotoDialogOpen] = useState(false);
  const [newPhoto, setNewPhoto] = useState('');

  useEffect(() => {
    fetchHotels();
    fetchComplaints();
    fetchCampaigns();
  }, []);

  const fetchHotels = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/hotels`);
      if (response.ok) {
        const data = await response.json();
        setHotels(data);
      }
    } catch (error) {
      console.error('Error fetching hotels:', error);
    }
  };

  const fetchComplaints = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/complaints`);
      if (!response.ok) {
        throw new Error('Şikayetler yüklenirken bir hata oluştu');
      }
      const data = await response.json();
      setComplaints(Array.isArray(data) ? data : []);
    } catch (error) {
      console.error('Şikayetler yüklenirken hata:', error);
      setComplaints([]);
    }
  };

  const fetchCampaigns = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/campaigns`);
      const data = await response.json();
      setCampaigns(data);
    } catch (error) {
      console.error('Error fetching campaigns:', error);
    }
  };

  const handleLogout = () => {
    navigate('/');
  };

  const handleOpenDialog = (hotel = null) => {
    if (hotel) {
      setEditingHotel(hotel);
      setFormData(hotel);
    } else {
      setEditingHotel(null);
      setFormData({
        name: '',
        location: '',
        price: '',
        rating: '',
        image: '',
        photos: [],
      });
    }
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setEditingHotel(null);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async () => {
    try {
      const url = editingHotel 
        ? `${API_BASE_URL}/hotels/${editingHotel.id}`
        : `${API_BASE_URL}/hotels`;
      
      const method = editingHotel ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        fetchHotels();
        handleCloseDialog();
        setSnackbar({
          open: true,
          message: editingHotel ? 'Otel başarıyla güncellendi' : 'Otel başarıyla eklendi',
          severity: 'success'
        });
      }
    } catch (error) {
      setSnackbar({
        open: true,
        message: 'İşlem sırasında bir hata oluştu',
        severity: 'error'
      });
    }
  };

  const handleDelete = async (id) => {
    try {
      const response = await fetch(`${API_BASE_URL}/hotels/${id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        fetchHotels();
        setSnackbar({
          open: true,
          message: 'Otel başarıyla silindi',
          severity: 'success'
        });
      }
    } catch (error) {
      setSnackbar({
        open: true,
        message: 'Silme işlemi sırasında bir hata oluştu',
        severity: 'error'
      });
    }
  };

  const handleDeleteComplaint = async (id) => {
    try {
      const response = await fetch(`${API_BASE_URL}/complaints/${id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        fetchComplaints();
        setSnackbar({
          open: true,
          message: 'Şikayet başarıyla silindi',
          severity: 'success'
        });
      }
    } catch (error) {
      setSnackbar({
        open: true,
        message: 'Şikayet silinirken bir hata oluştu',
        severity: 'error'
      });
    }
  };

  const handleOpenCampaignDialog = (campaign = null) => {
    if (campaign) {
      setEditingCampaign(campaign);
      setCampaignFormData(campaign);
    } else {
      setEditingCampaign(null);
      setCampaignFormData({
        title: '',
        description: '',
        discount: '',
        startDate: '',
        endDate: '',
        image: ''
      });
    }
    setOpenCampaignDialog(true);
  };

  const handleCloseCampaignDialog = () => {
    setOpenCampaignDialog(false);
    setEditingCampaign(null);
  };

  const handleCampaignInputChange = (e) => {
    const { name, value } = e.target;
    setCampaignFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCampaignSubmit = async () => {
    try {
      const url = editingCampaign 
        ? `${API_BASE_URL}/campaigns/${editingCampaign.id}`
        : `${API_BASE_URL}/campaigns`;
      
      const method = editingCampaign ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(campaignFormData),
      });

      if (response.ok) {
        fetchCampaigns();
        handleCloseCampaignDialog();
        setSnackbar({
          open: true,
          message: editingCampaign ? 'Kampanya başarıyla güncellendi' : 'Kampanya başarıyla eklendi',
          severity: 'success'
        });
      }
    } catch (error) {
      setSnackbar({
        open: true,
        message: 'İşlem sırasında bir hata oluştu',
        severity: 'error'
      });
    }
  };

  const handleDeleteCampaign = async (id) => {
    if (!window.confirm('Bu kampanyayı silmek istediğinize emin misiniz?')) {
      return;
    }
    
    try {
      const response = await fetch(`${API_BASE_URL}/campaigns/${id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        fetchCampaigns();
        setSnackbar({
          open: true,
          message: 'Kampanya başarıyla silindi',
          severity: 'success'
        });
      }
    } catch (error) {
      setSnackbar({
        open: true,
        message: 'Kampanya silinirken bir hata oluştu',
        severity: 'error'
      });
    }
  };

  const handleOpenPhotoDialog = (hotel) => {
    setSelectedHotel(hotel);
    setPhotoDialogOpen(true);
  };

  const handleClosePhotoDialog = () => {
    setPhotoDialogOpen(false);
    setSelectedHotel(null);
    setNewPhoto('');
  };

  const handleAddPhoto = async () => {
    if (!newPhoto || !selectedHotel) return;

    try {
      const updatedHotel = {
        ...selectedHotel,
        photos: [...(selectedHotel.photos || []), newPhoto]
      };

      const response = await fetch(`${API_BASE_URL}/hotels/${selectedHotel.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedHotel),
      });

      if (response.ok) {
        fetchHotels();
        handleClosePhotoDialog();
        setSnackbar({
          open: true,
          message: 'Fotoğraf başarıyla eklendi',
          severity: 'success'
        });
      }
    } catch (error) {
      setSnackbar({
        open: true,
        message: 'Fotoğraf eklenirken bir hata oluştu',
        severity: 'error'
      });
    }
  };

  const handleDeletePhoto = async (hotelId, photoIndex) => {
    try {
      const hotel = hotels.find(h => h.id === hotelId);
      if (!hotel) return;

      const updatedPhotos = [...hotel.photos];
      updatedPhotos.splice(photoIndex, 1);

      const response = await fetch(`${API_BASE_URL}/hotels/${hotelId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ ...hotel, photos: updatedPhotos }),
      });

      if (response.ok) {
        fetchHotels();
        setSnackbar({
          open: true,
          message: 'Fotoğraf başarıyla silindi',
          severity: 'success'
        });
      }
    } catch (error) {
      setSnackbar({
        open: true,
        message: 'Fotoğraf silinirken bir hata oluştu',
        severity: 'error'
      });
    }
  };

  const handleTabChange = (newValue) => {
    setActiveTab(newValue);
  };

  // JSX return bölümü (uzunluk sınırı için kısaltıldı)
  return (
    <div className="admin-container">
      {/* Admin panel arayüzü */}
    </div>
  );
};

export default AdminPanel;

-- Campaigns.js --
import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  CardMedia,
  Grid,
  Button,
  Chip,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { API_BASE_URL } from '../config';

function Campaigns() {
  const [campaigns, setCampaigns] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCampaigns = async () => {
      try {
        setLoading(true);
        const response = await fetch(`${API_BASE_URL}/campaigns`);
        if (!response.ok) {
          throw new Error('Kampanyalar yüklenirken bir hata oluştu');
        }
        const data = await response.json();
        setCampaigns(data);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchCampaigns();
  }, []);

  const handleCampaignClick = (hotelId) => {
    navigate(`/hotels/${hotelId}`);
  };

  // JSX return bölümü (kısaltıldı)
  return (
    <Box sx={{ p: 3 }}>
      {/* Kampanyalar listesi */}
    </Box>
  );
}

export default Campaigns;

-- Hotels.js --
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Card,
  CardContent,
  CardMedia,
  Typography,
  Grid,
  Button,
  TextField,
  Box,
  Rating,
  Chip,
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import StarIcon from '@mui/icons-material/Star';
import { API_BASE_URL } from '../config';

function Hotels() {
  const [hotels, setHotels] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    fetchHotels();
  }, []);

  const fetchHotels = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/hotels`);
      if (!response.ok) {
        throw new Error('Oteller yüklenirken bir hata oluştu');
      }
      const data = await response.json();
      setHotels(data);
      setLoading(false);
    } catch (error) {
      setError(error.message);
      setLoading(false);
    }
  };

  // JSX return bölümü (kısaltıldı)
  return (
    <Box sx={{ p: 3 }}>
      {/* Oteller listesi */}
    </Box>
  );
}

export default Hotels;

------------ 2. BACKEND KODLARI ------------

-- server.js --
const express = require('express');
const cors = require('cors');
// const mongoose = require('mongoose');
require('dotenv').config();

const app = express();

// CORS Ayarları
app.use(cors({
  origin: process.env.CLIENT_URL || 'http://localhost:3000',
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  credentials: true
}));

app.use(express.json());

// Routes
const authRoutes = require('../routes/auth');
const hotelsRouter = require('../routes/hotels');
const bookingsRouter = require('../routes/bookings');
const reviewsRoutes = require('../routes/reviews');
const favoritesRoutes = require('../routes/favorites');
const campaignsRoutes = require('../routes/campaigns');
const feedbackRoutes = require('../routes/feedback');
const complaintsRoutes = require('../routes/complaints');

app.use('/api/auth', authRoutes);
app.use('/api/hotels', hotelsRouter);
app.use('/api/bookings', bookingsRouter);
app.use('/api/reviews', reviewsRoutes);
app.use('/api/favorites', favoritesRoutes);
app.use('/api/campaigns', campaignsRoutes);
app.use('/api/feedback', feedbackRoutes);
app.use('/api/complaints', complaintsRoutes);

// API durumunu kontrol etmek için basit bir endpoint
app.get('/', (req, res) => {
  res.status(200).json({ 
    message: 'Tatilim API çalışıyor',
    status: 'online'
  });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: 'Bir şeyler ters gitti!' });
});

const PORT = process.env.PORT || 5002;
app.listen(PORT, () => {
  console.log(`Server ${PORT} portunda çalışıyor`);
  console.log('API Endpoints:');
  console.log(`- Hotels: http://localhost:${PORT}/api/hotels`);
  console.log(`- Complaints: http://localhost:${PORT}/api/complaints`);
  console.log(`- Campaigns: http://localhost:${PORT}/api/campaigns`);
});

------------ 3. DEPLOYMENT YAPILANDIRMALARI ------------

-- netlify.toml --
[build]
  base = "frontend"
  publish = "build"
  command = "npm run build"

[context.production.environment]
  REACT_APP_API_URL = "https://tatilim-api.onrender.com/api"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

-- backend/render.yaml --
services:
  - type: web
    name: tatilim-api
    env: node
    buildCommand: npm install
    startCommand: node server.js
    envVars:
      - key: PORT
        value: 5002
      - key: JWT_SECRET
        generateValue: true
      - key: MONGODB_URI
        sync: false # Render Dashboard'da manuel olarak ayarlanmalı
      - key: CLIENT_URL
        value: https://tatilim-site.netlify.app

-- package.json (Root) --
{
  "name": "tatilim-app",
  "version": "1.0.0",
  "description": "Tatilim vacation booking application",
  "scripts": {
    "start": "node server.js",
    "server": "nodemon server.js",
    "client": "cd frontend && npm start",
    "dev": "concurrently \"npm run server\" \"npm run client\"",
    "install-all": "npm install && cd backend && npm install && cd ../frontend && npm install"
  },
  "dependencies": {
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.2"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "nodemon": "^3.0.1"
  }
}

-- .env --
PORT=5002
JWT_SECRET=tatilimsecretkey123
MONGODB_URI=mongodb://localhost:27017/tatilim

======================= BİTİŞ ======================= 